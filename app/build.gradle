plugins {
    id 'com.android.application'
}

def propertiesFile = file(System.properties['user.home'] + '/.gradle/gradle.properties')
def properties = new Properties()
if (propertiesFile.exists()) {
    properties.load(new FileInputStream(propertiesFile))
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "io.ffem.reports"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 7
        versionName "1.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (properties.getProperty('FFEM_RELEASE_STORE_FILE')) {
                storeFile file(properties.getProperty('FFEM_RELEASE_STORE_FILE'))
                storePassword properties.getProperty('FFEM_RELEASE_STORE_PASSWORD')
                keyAlias properties.getProperty('FFEM_RELEASE_KEY_ALIAS')
                keyPassword properties.getProperty('FFEM_RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        release {
            if (properties.getProperty('FFEM_RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "java.util.Date", "BUILD_TIME", "new java.util.Date(" +
                    (System.currentTimeMillis()) + "L)"
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "ffem-reports-${variant.versionCode}.apk"
                }
            }
        }
    }

    defaultConfig {
        buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "INSTRUMENTED_TEST_RUNNING",
                "new java.util.concurrent.atomic.AtomicBoolean(false)"
        buildConfigField "java.util.Date", "BUILD_TIME", "new java.util.Date(" + 0L + ")"
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    tasks.withType(Test) {
        testLogging {
            exceptionFormat "full"
            events "started", "skipped", "passed", "failed"
            showStandardStreams true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Support
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Testing
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.assertj:assertj-core:3.8.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.2"

    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.3.0') {
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }

    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation "org.robolectric:shadows-support-v4:3.4-rc2"

    // UIAutomator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}
